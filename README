Componenti del gruppo:

    Nome         -           Cognome             -        Numero di matricola
 Federica        -           Belotti             -           193872
 Claudio         -           Facchinetti         -           193588
 Federica        -           Ress                -           195172

Breve descrizione del progetto:
Emulazione di un sistema di domotica. Il progetto è stato implementato con la variante dei processi. 

Ciascun dispositivo genera tre diversi processi che collaborano per la gestione del dispositivo e delle sue funzionalità. I processi comunicano tra di loro sulla stessa pipe (pipe_interna).
I processi sono destinati alla gestione di un particolare aspetto e sono chiamati:
- 1. il processo del dispositivo
- 2. il processo che si occupa di comunicare con le interazioni esterne, per comunicare con l'umano.
- 3. il processo che si occupa di comunicare con il processo padre.

La comunicazione del dispositivo è implementata tramite l'utilizzo di tre pipe, chiamate:
- pipe_interna: pipe sulla quale scrivono i processi 1, 2 e 3 e leggono i processi 1 e 3. E' la pipe destinata alle comunicazioni all'interno del dispositivo.
- pipe_esterna: pipe sulla quale legge il processo 2 e scrive il processo rappresentante l'interazione esterna. E' la pipe destinata alle comunicazioni con l'umano.
- pipe <id>: pipe su cui leggono e scrivono i processi 3 e il controllore del dispositivo. E' la pipe destinata alle comunicazioni con il processo padre.

Questo sistema di gestione è comune per tutti le tipologie di dispositivi emulate da questo progetto.


Differenze tra dispositivi di controllo e di interazione

La differenza tra dispositivi di controllo e dispositivi di interazione è principalmente nella gestione di messaggi.
In tutti i dispositivi la gestione dei messaggi in entrata propri (con id_destinatario == id_dispositivo) è simile.
Dopo un controllo sull'id, c'è un controllo sul tipo di messaggio, su che interruttore (o registro) questo agisce e come.
Ogni dispositivo può gestire messaggi di tipo diverso, i quali sono descritti in seguito in questo file.
La gestione dei messaggi in entrata non propri (con id_destinatario != id_dispositivo) caratterizza i dispositivi di controllo. 
Quando un dispositivo di controllo riceve un messaggio non proprio chiede ai/al propri/o figli/o se può mandare il messaggio per arrivare al dispositivo interessato. Se un dispositivo di interazione riceve un messaggio non proprio, ignora il messaggio stesso.

Un'ulteriore differenza tra dispositivi di interazione e controllo è nella gestione dell'override. L'override è uno stato proprio di hub e timer. Entrambi controllano se il/i figlio/i sia/siano in uno stato consistente oppure no. In questo modo si riesce a capire se un umano sia intervenuto sullo stato di un dispositivo connesso al dispositivo di controllo interessato.

Infine solo i dispositivi di controllo possono generare dispositivi di qualsiasi tipologia e rimuovere dispositivi.


Note sulla comunicazione, sui comandi e peculiarità

In seguito sono descritti i tipi di messaggi presenti nella libreria "comunicazione".

(1) "STATUSGET": per richiedere lo stato di un dispositivo;
(2) "ID": chiede se può arrivare al dispositivo con id <ID> tramite un dispositivo;
(3) "LABELUP": per modificare gli interruttori di un dispositivo. Nota: nella centralina esiste un messaggio "SWITCH" che viene poi modificato in "LABELUP";
(4) "REMOVE": per rimuovere un dispositivo (solo per dispositivi di controllo).
(6) "STATUSGETRES": messaggio di risposta a messaggi di risposta a messaggi del tipo (1) dai dispositivi, i quali vengono poi interpretati per generare una stampa a video delle informazioni richieste ai dispositivi.
(7) "CONFIRM": per confermare che l'id richiesto corrisponda al proprio id.
(8) "SPAWN": per generare un dispositivo figlio (solo per dispositivi di controllo).
(9) "SET_FILL": per gestire il registro riempimento (solo per il frigo)
(10) "DONE": messaggio inviato da un dispositivo per confermare di aver terminato l'azione desiderata e quindi sbloccare la pipe interna


In seguito sono descritti i tipi di messaggi che i dispositivo gestiscono e alcune peculiarità di alcuni dispositivi.

----Centralina---- 
La centralina ha i seguenti tipi di comandi.
(a) "list": stampa a video uno stato del sistema
(b) "add <tipo_dispositivo>": aggiunge un dispositivo del tipo indicato al sistema. Sono permessi solamente dispositivi dei tipi indicati nella consegna. Quando si esegue un comando "add" per un nuovo dispositivo (qualsiasi tipo), vi è la generazione di un processo figlio, il quale genera un altro processo figlio per poi terminare. In questo modo il processo del componente viene adottato da init() e quindi non risulta figlio della centralina.
(c) "link <id_0> to <id_1>": collega il dispositivo con id_0 al dispositivo con id_1. Il comando link genera un messaggio di tipo "SPAWN", il quale ????.
Funziona anche in caso di dispositivi già collegati (in casi di link consentita, ossia a dispositivi di controllo), scollegando id_0 dal dispositivo a cui era collegato e collegandolo a id_1.
(d) "del <id>": rimuove il dispositivo con id interessato
(e) "switch <id> <interruttore> <stato>": invia un messaggio di tipo LABELUP per modificare gli interruttori del dispositivo con id interessato.
(f) "info <id>": stampa a video le informazioni del dispositivo con id interessato
(g) "exit": esce dal sistema

----Hub----
L'implementazione dell'hub di questo sistema è quella più generale. Può avere collegati diversi dispositivi di diverso tipo e riuscire a gestirli.

----Finestra----
Il comando del tipo (e) inviato dalla centralina gestisce l'interruttore di apertura e di chiusura tramite i seguenti messaggi:
- switch <id> OPEN ON: apre la finestra 
- switch <id> CLOSE ON: chiude la finestra

----Frigo----
Il comando del tipo (e) inviato dalla centralina gestisce gli interruttori di apertura e di chiusura e i registri della temperatura e della chiusura automatica tramite i seguenti messaggi:
- switch <id> OPEN ON: apre la finestra 
- switch <id> CLOSE ON: chiude la finestra
- switch <id> TEMPERATURE <int n>: imposta il registro della temperatura alla temperatura interessata 
- switch <id> DELAY <int n>: imposta il registro della chiusura automatica al valore indicato (in secondi). Il registro delay è gestito con la funzione alarm(int n), dove n esprime il tempo dall'apertura in secondi.

Override manuale del registro di riempimento
(9) "SET_FILL": messaggio utilizzato da questo componente per la gestione del registro riempimento. Nota: il registro riempimento è gestibile solo manualmente (tramite override), quindi il messaggio per la gestione è inviabile solo dall'umano (non dalla centralina).

----Lampadina----
Il comando del tipo (e) inviato dalla centralina gestisce l'interruttore di accensione e di spegnimento tramite i seguenti messaggi:
- switch <id> ACCENSIONE ON: accende la lampadina
- switch <id> ACCENSIONE OFF: spegne la lampadina


Implementazione di "umano"
L'umano esegue sempre la stessa funzione la quale:
- chiede in input l'id dispositivo e il tipo di messaggio da mandare
- invia un hmessaggio all'id interessato
- interpreta i messaggi che arrivano 
Può inviare ai singoli dispositivi tutti i tipi di messaggi descritti sopra.


Makefile
Il makefile contiene le tre ricette indicate nella consegna ("help", "build" e "clean"), inoltre:
- run: esegue il progetto"
Sono presenti delle easter eggs: 
- spiegazione_processi_pipe (disegno - spiegazione per i processi e le pipe)

La ricetta "build" compila le componenti e le dipendenze in file .out dei vari dispositivi denominati in inglese (grazie al flag -o).


Exit:
Il sistema risponde con una exit(0) quando:
- viene inviato nella linea di comando della centralina il comando exit, per uscire dal sistema e scollegare tutto
- la centralina deve generare un dispositivo non direttamente connesso ad essa. Vi è la generazione di un figlio, il quale si auto-rimuove dopo aver generato un nipote
- il numero di argomenti in linea di input minori di quelli accettati dal programma (meno di 2)
- quando un dispositivo viene rimosso (si scollega ed esce)


Shell
Il sistema utilizza una sola shell per l'interazione con l'utente. I processi non generano altre shell e l'interazione può avvenire da terminale testuale.


Ambienti testati
Il progetto funziona sui seguenti ambienti testati: 
- Ubuntu 18.x (come richiesto)
- Ubuntu 19.02
- macOS Mojave (14.1.2)
- macOS High Sierra (13.4.1)


----------------------------------------------------- [TODO]-----------------------------------------------------------------------
Controllare la correttezza, la grammatica e la sintassi di questo file.
Controllare che non ci sia nient'altro da aggiungere in questo file.
Aggiungere librerie incluse (e perché) 
---------------------------------------------------------------------------------------------------------------------------------------------------------------